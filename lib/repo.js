const files = require('./files')
const util = require('util')
const exec = util.promisify(require('child_process').exec)

const createRemoteRepo = async (githubOctokitInstance, projectDetails) => {
	let github = githubOctokitInstance
	let repoData = {
		name         : projectDetails.project_name,
		description  : projectDetails.project_description,
		private      : projectDetails.project_visibility === 'private',
		has_issues   : projectDetails.project_features.includes('has_issues'),
		has_projects : projectDetails.project_features.includes('has_projects'),
		has_wiki     : projectDetails.project_features.includes('has_wiki')
	}

	try {
		const resp = await github.repos.createForAuthenticatedUser(repoData)
		return resp.data.html_url
	} catch (err) {
		throw new Error(err)
	}
}

const initLocalRepo = async (projectName) => {
	try {
		if (
			files.directoryExists(`${files.getProjectDirectoryIfExists(projectName)}/.git/`) ||
			!files.directoryExists(`${files.getCurrentDirectory()}/${projectName}`)
		) {
			throw new Error(`Cannot initialize a Git project here (already exists).`)
		}
		const { stderr } = await exec(`git init ${files.getProjectDirectoryIfExists(projectName)}`)
		return !stderr
	} catch (err) {
		throw new Error(err)
	}
}

const attachToRemote = async (projectName, remoteSource) => {
	try {
		if (remoteSource !== null) {
			const { stderr } = await exec(
				`cd ${files.getProjectDirectoryIfExists(projectName)} && git remote add origin ${remoteSource}.git`
			)
			return !stderr
		} else {
			throw new Error(`Invalid remote source passed to Attach command. ${remoteSource}`)
		}
	} catch (err) {
		throw new Error(`Problem trying to attach local to remote. ${err}`)
	}
}

const publishProjectContent = async (projectName) => {
	try {
		const { stderr } = await exec(`cd ${files.getProjectDirectoryIfExists(projectName)} && git add -A`)
		if (!stderr) {
			const { stderr } = await exec(
				`cd ${files.getProjectDirectoryIfExists(
					projectName
				)} && git commit -m "gitBuilder: autogenerated project"`
			)
			if (!stderr) {
				const { stderr } = await exec(
					`cd ${files.getProjectDirectoryIfExists(projectName)} && git push --set-upstream origin master`
				)
				return !stderr
			}
		}
		return false
	} catch (err) {
		throw new Error(`Problem trying to publish content to remote. ${err}`)
	}
}

module.exports = {
	createRemoteRepo,
	initLocalRepo,
	attachToRemote,
	publishProjectContent
}
